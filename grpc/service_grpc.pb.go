// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceCommunicatorClient is the client API for ServiceCommunicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceCommunicatorClient interface {
	SendRandStringStream(ctx context.Context, opts ...grpc.CallOption) (ServiceCommunicator_SendRandStringStreamClient, error)
	SendRandString(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Connected(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*ServeResponse, error)
	Disconnected(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*ServeResponse, error)
}

type serviceCommunicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceCommunicatorClient(cc grpc.ClientConnInterface) ServiceCommunicatorClient {
	return &serviceCommunicatorClient{cc}
}

func (c *serviceCommunicatorClient) SendRandStringStream(ctx context.Context, opts ...grpc.CallOption) (ServiceCommunicator_SendRandStringStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceCommunicator_ServiceDesc.Streams[0], "/proto.ServiceCommunicator/SendRandStringStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceCommunicatorSendRandStringStreamClient{stream}
	return x, nil
}

type ServiceCommunicator_SendRandStringStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type serviceCommunicatorSendRandStringStreamClient struct {
	grpc.ClientStream
}

func (x *serviceCommunicatorSendRandStringStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceCommunicatorSendRandStringStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceCommunicatorClient) SendRandString(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/proto.ServiceCommunicator/SendRandString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCommunicatorClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceCommunicator/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCommunicatorClient) Connected(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*ServeResponse, error) {
	out := new(ServeResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceCommunicator/Connected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCommunicatorClient) Disconnected(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*ServeResponse, error) {
	out := new(ServeResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceCommunicator/Disconnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceCommunicatorServer is the server API for ServiceCommunicator service.
// All implementations must embed UnimplementedServiceCommunicatorServer
// for forward compatibility
type ServiceCommunicatorServer interface {
	SendRandStringStream(ServiceCommunicator_SendRandStringStreamServer) error
	SendRandString(context.Context, *Message) (*Message, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Connected(context.Context, *HealthCheckRequest) (*ServeResponse, error)
	Disconnected(context.Context, *HealthCheckRequest) (*ServeResponse, error)
	mustEmbedUnimplementedServiceCommunicatorServer()
}

// UnimplementedServiceCommunicatorServer must be embedded to have forward compatible implementations.
type UnimplementedServiceCommunicatorServer struct {
}

func (UnimplementedServiceCommunicatorServer) SendRandStringStream(ServiceCommunicator_SendRandStringStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendRandStringStream not implemented")
}
func (UnimplementedServiceCommunicatorServer) SendRandString(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRandString not implemented")
}
func (UnimplementedServiceCommunicatorServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedServiceCommunicatorServer) Connected(context.Context, *HealthCheckRequest) (*ServeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connected not implemented")
}
func (UnimplementedServiceCommunicatorServer) Disconnected(context.Context, *HealthCheckRequest) (*ServeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnected not implemented")
}
func (UnimplementedServiceCommunicatorServer) mustEmbedUnimplementedServiceCommunicatorServer() {}

// UnsafeServiceCommunicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceCommunicatorServer will
// result in compilation errors.
type UnsafeServiceCommunicatorServer interface {
	mustEmbedUnimplementedServiceCommunicatorServer()
}

func RegisterServiceCommunicatorServer(s grpc.ServiceRegistrar, srv ServiceCommunicatorServer) {
	s.RegisterService(&ServiceCommunicator_ServiceDesc, srv)
}

func _ServiceCommunicator_SendRandStringStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceCommunicatorServer).SendRandStringStream(&serviceCommunicatorSendRandStringStreamServer{stream})
}

type ServiceCommunicator_SendRandStringStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type serviceCommunicatorSendRandStringStreamServer struct {
	grpc.ServerStream
}

func (x *serviceCommunicatorSendRandStringStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceCommunicatorSendRandStringStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceCommunicator_SendRandString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCommunicatorServer).SendRandString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceCommunicator/SendRandString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCommunicatorServer).SendRandString(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCommunicator_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCommunicatorServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceCommunicator/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCommunicatorServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCommunicator_Connected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCommunicatorServer).Connected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceCommunicator/Connected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCommunicatorServer).Connected(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCommunicator_Disconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCommunicatorServer).Disconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceCommunicator/Disconnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCommunicatorServer).Disconnected(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceCommunicator_ServiceDesc is the grpc.ServiceDesc for ServiceCommunicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceCommunicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceCommunicator",
	HandlerType: (*ServiceCommunicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRandString",
			Handler:    _ServiceCommunicator_SendRandString_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ServiceCommunicator_HealthCheck_Handler,
		},
		{
			MethodName: "Connected",
			Handler:    _ServiceCommunicator_Connected_Handler,
		},
		{
			MethodName: "Disconnected",
			Handler:    _ServiceCommunicator_Disconnected_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendRandStringStream",
			Handler:       _ServiceCommunicator_SendRandStringStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
